@page "/files/import"
@rendermode InteractiveAuto
@using Models
@using CsvHelper
@using CsvHelper.Configuration
@using System.Globalization
@using System.Linq
@using System.ComponentModel.DataAnnotations
@inject ExpensesManagementApp.Client.Services.FileService.IFileService fileService
@inject IDialogService dialogService
@inject ISnackbar snackbar

<PageTitle>Import</PageTitle>

<MudPaper Class="mt-5 pa-5">
    <h3>Import file</h3>
    <MudGrid>
        <MudItem md="6" xs="12">
            <MudGrid>
                <MudItem md="6" xs="12">
                    <MudStack Row="true" Justify="Justify.FlexStart">
                        <MudButton OnClick="async () => await (_fileUploadComponent?.OpenFilePickerAsync() ?? Task.CompletedTask)" Size="Size.Small" Color="Color.Dark" Variant="Variant.Filled">Open file picker</MudButton>
                        <MudButton OnClick="UploadFileAsync" Disabled="!file.BankType.HasValue" Size="Size.Small" Color="Color.Dark" Variant="Variant.Filled">Upload file</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem md="6" xs="12">
                    <MudSelect T="Models.File.BankTypeEnum?" Value="file.BankType" ValueChanged="(bt) => {file.BankType = bt;}" Label="@(DisplayHelper.DisplayName(() => file.BankType))">
                        @foreach (var bankType in Enum.GetValues(typeof(Models.File.BankTypeEnum)))
                        {
                            var _bankType = (Models.File.BankTypeEnum)bankType;
                            <MudSelectItem T="Models.File.BankTypeEnum?" Value="_bankType">@Models.File.File.BankTypeText(_bankType)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                @if (isFileUploaded)
                {
                    <MudItem md="12" xs="12">
                        <MudChip T="string" OnClose="DeleteFile">
                            <MudIcon Icon="@Icons.Custom.FileFormats.FileExcel"></MudIcon>
                            @file.FileName
                        </MudChip>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        <MudItem md="6" xs="12">
            <MudFileUpload T="IBrowserFile" @ref="_fileUploadComponent" OnFilesChanged="OnFilesUploadedAsync" Accept=".csv, .txt"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10" InputStyle="opacity:0" tabindex="-1">
            </MudFileUpload>
        </MudItem>
    </MudGrid>
    @if (file.Transactions.Count() > 0)
    {
        <MudTable Class="mt-5" Items="file?.Transactions.Take(numberOfExpensesToDisplay)" Hover=true Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@($"Expenses {file?.Transactions.Take(numberOfExpensesToDisplay).Count()}/{numberOfExpensesToDisplay}")</MudText>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                @if (file != null)
                {
                    var transaction = file.Transactions.First();
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.AccountingDate)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationDate)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationTitle)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.Amount)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.Recipient)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationNumber)</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="AccountingDate">@context.AccountingDate</MudTd>
                <MudTd DataLabel="OperationDate">@context.OperationDate</MudTd>
                <MudTd DataLabel="OperationTitle">@context.OperationTitle</MudTd>
                <MudTd DataLabel="Amount">@context.Amount</MudTd>
                <MudTd DataLabel="Recipient">@context.Recipient</MudTd>
                <MudTd DataLabel="OperationNumber">@context.OperationNumber</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private Models.File.File file = new Models.File.File();

    private int numberOfExpensesToDisplay = 100;
    private bool isFileUploaded = false;

    private MudFileUpload<IBrowserFile>? _fileUploadComponent;

    private async Task OnFilesUploadedAsync(InputFileChangeEventArgs args)
    {
        var uploadedFile = args.File;
        file.FileName = uploadedFile.Name;
        file.FileSize = uploadedFile.Size;
        file.Transactions = await OpenFileAndMapExpensesAsync(uploadedFile);
        isFileUploaded = true;
    }

    private async Task<IEnumerable<Models.Transaction.Transaction>> OpenFileAndMapExpensesAsync(IBrowserFile uploadedFile)
    {
        using var stream = uploadedFile.OpenReadStream();

        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        memoryStream.Position = 0;

        var config = new CsvConfiguration(CultureInfo.GetCultureInfo("pl-PL"))
        {
            Delimiter = ";",
            HasHeaderRecord = false
        };

        using (var reader = new StreamReader(memoryStream, System.Text.Encoding.UTF8))
        using (var csv = new CsvReader(reader, config))
        {
            List<Models.Transaction.Transaction> records = [];
            csv.Context.RegisterClassMap<Models.Transaction.TransactionMap>();

            return await csv.GetRecordsAsync<Models.Transaction.Transaction>().ToListAsync();
        }
    }

    private async Task UploadFileAsync()
    {
        if (!file.IsUploadingAllowed() || !isFileUploaded)
        {
            await dialogService.ShowMessageBox("Warning", "File uploading is not possible.");
            return;
        } 

        var response = await fileService.UploadFileAsync(file);

        if (response.StatusCode == 200)
        {
            snackbar.Add("File successfully uploaded.");
            DeleteFile();
        }
        else
        {
            snackbar.Add(response.Message ?? "Error while uploading file.");
        }

    }

    private void DeleteFile()
    {
        file.FileName = null;
        file.FileSize = null;
        file.Transactions = [];
        isFileUploaded = false;
    }
}