@rendermode InteractiveAuto
@using ExpensesManagementApp.Models.Transaction
@inject IDialogService dialogService
@inject ExpensesManagementApp.Client.Services.TransactionService.ITransactionService transactionService

@if (FilePackage?.File?.Transactions?.Count() > 0)
{
    <MudItem md="12" xs="12">
        @if (AssigningToGroupActive)
        {
            <MudGrid>
                <MudItem md="3" xs="12">
                    <MudTextField T="string" @bind-Value="TransactionGroup.TransactionGroupName" Label="@(DisplayHelper.DisplayName(() => TransactionGroup.TransactionGroupName))" />
                </MudItem>
                <MudItem md="3" xs="12">
                    <MudButton OnClick="AddTransactionGroupAsync" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">Add transaction group</MudButton>
                </MudItem>
            </MudGrid>
        }
    </MudItem>

    var transaction = FilePackage?.File?.Transactions.First();
    <MudPaper>
        <MudTable T="Models.Transaction.Transaction" Items="FilePackage?.File?.Transactions" Hover=true Dense="true">
            <HeaderContent>
                @if (transaction is not null)
                {
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationDate)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.Amount)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationTitle)</MudTh>
                    <MudTh>@($"{DisplayHelper.DisplayName(() => transaction.Recipient)}/{DisplayHelper.DisplayName(() => transaction.Sender)}")</MudTh>
                    <MudTh>Action</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd>@(context.TransactionGroupId.HasValue ? @* FilePackage?.TransactionGroups?.Where(tg => tg?.TransactionGroupId == context.TransactionGroupId).FirstOrDefault()  *@ "Placeholder" : context.OperationDate)</MudTd>
                <MudTd>@(context.TransactionGroupId.HasValue ? FilePackage?.TransactionGroups?.Where(tg => tg?.TransactionGroupId == context.TransactionGroupId).FirstOrDefault()?.TransactionGroupSum : context.Amount)</MudTd>
                <MudTd>@(context.TransactionGroupId.HasValue ? FilePackage?.TransactionGroups?.Where(tg => tg?.TransactionGroupId == context.TransactionGroupId).FirstOrDefault()?.TransactionGroupName : context.OperationTitle)</MudTd>
                <MudTd>@(context.TransactionGroupId.HasValue ? "Placeholder" : (string.IsNullOrEmpty(context.Recipient) ? context.Sender : context.Recipient))</MudTd>
                <MudTd>
                    <MudStack Row="true">
                        <MudIconButton Icon="@(Edition ? Icons.Material.Rounded.Edit : Icons.Material.Rounded.Search)" Variant="Variant.Outlined" OnClick="async () => await ShowTransactionDialogAsync(context)" />
                        @if (AssigningToGroupActive)
                        {
                            <MudCheckBox T="bool" ValueChanged="(isCheckboxMarked) => HandleTransactionGroupCheckboxValueChanged(context, isCheckboxMarked)" />
                        }
                    </MudStack>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@code {

    [Parameter]
    public Models.File.FilePackage? FilePackage { get; set; }

    [Parameter]
    public bool Edition { get; set; }

    [Parameter]
    public bool AssigningToGroupActive { get; set; }

    [Parameter]
    public EventCallback<bool> AssigningToGroupActiveCallback { get; set; }

    [Parameter]
    public TransactionGroup TransactionGroup { get; set; } = new();

    private List<Models.Transaction.TransactionGroup?> transactionGroups { get; set; } = [];

    private async Task ShowTransactionDialogAsync(Models.Transaction.Transaction? transaction)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters<ExpensesManagementApp.Client.Components.Dialogs.TransactionDialog>
        {
            { p => p.Edition, Edition},
            { p => p.Transaction, transaction},
            { p => p.FileId, FilePackage?.File?.FileId}
        };

        var result = await dialogService.ShowAsync<Components.Dialogs.TransactionDialog>("Transaction", parameters, options);
    }

    private void HandleTransactionGroupCheckboxValueChanged(Models.Transaction.Transaction transaction, bool isCheckboxMarked)
    {
        if (isCheckboxMarked)
        {
            TransactionGroup.Transactions.Add(transaction);
        }
        else
        {
            TransactionGroup.Transactions.Remove(transaction);
        }
    }

    private async Task AddTransactionGroupAsync()
    {
        var _httpResult = await transactionService.AssignTransactionsToGroup(TransactionGroup);
    }
}
