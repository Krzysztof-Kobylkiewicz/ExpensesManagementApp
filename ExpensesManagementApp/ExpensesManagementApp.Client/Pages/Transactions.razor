@rendermode InteractiveAuto
@using ExpensesManagementApp.Models.Transaction
@inject IDialogService dialogService
@inject NavigationManager navigationManager
@inject ExpensesManagementApp.Client.Services.TransactionService.ITransactionService transactionService

@if (FilePackage?.File?.Transactions?.Count() > 0)
{
    <MudItem md="12" xs="12">
        @if (AssigningToGroupActive)
        {
            <MudGrid>
                <MudItem md="3" xs="12">
                    <MudTextField T="string" @bind-Value="TransactionGroup.TransactionGroupName" Label="@(DisplayHelper.DisplayName(() => TransactionGroup.TransactionGroupName))" />
                </MudItem>
                <MudItem md="3" xs="12">
                    <MudButton OnClick="AddTransactionGroupAsync" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">Add transaction group</MudButton>
                </MudItem>
            </MudGrid>
        }
    </MudItem>

    var transaction = FilePackage?.File?.Transactions.First();
    <MudPaper Class="mt-10 mb-5">
        <MudTable T="Models.Transaction.ITransaction" Items="tableGroupedTransactions" Hover=true Dense="true">
            <HeaderContent>
                @if (transaction is not null)
                {
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationDate)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.Amount)</MudTh>
                    <MudTh>@DisplayHelper.DisplayName(() => transaction.OperationTitle)</MudTh>
                    <MudTh>@($"{DisplayHelper.DisplayName(() => transaction.Recipient)}/{DisplayHelper.DisplayName(() => transaction.Sender)}")</MudTh>
                    <MudTh>Action</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.OperationDate</MudTd>
                <MudTd>@context.Amount</MudTd>
                @if (context is Models.Transaction.Transaction transaction)
                {
                    <MudTd>@context.OperationTitle</MudTd>
                    <MudTd>@(!string.IsNullOrEmpty(transaction.Recipient) ? transaction.Recipient : transaction.Sender)</MudTd>
                    <MudTd>
                        <MudStack Row="true">
                            <MudIconButton Icon="@(Edition ? Icons.Material.Rounded.Edit : Icons.Material.Rounded.Search)" Variant="Variant.Outlined" OnClick="async () => await ShowTransactionDialogAsync(transaction)" />
                            @if (AssigningToGroupActive)
                            {
                                <MudCheckBox T="bool" Disabled="transaction.TransactionGroupId.HasValue" ValueChanged="(isCheckboxMarked) => HandleTransactionGroupCheckboxValueChanged(transaction, isCheckboxMarked)" />
                            }
                        </MudStack>
                    </MudTd>
                }
                else if (context is Models.Transaction.TransactionRepresentant transactionRepresentant)
                {
                    <MudTd>@("Group of transactions: " + context.OperationTitle)</MudTd>
                    <MudTd>@string.Empty</MudTd>
                    <MudTd>
                    <MudIconButton Icon="@(Edition ? Icons.Material.Rounded.Edit : Icons.Material.Rounded.Search)" Variant="Variant.Outlined" OnClick="async () => await ShowTransactionDialogAsync(transactionRepresentant)" />
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@code {

    [Parameter]
    public Models.File.FilePackage? FilePackage { get; set; }

    [Parameter]
    public bool Edition { get; set; }

    [Parameter]
    public bool AssigningToGroupActive { get; set; }

    [Parameter]
    public EventCallback<bool> AssigningToGroupActiveCallback { get; set; }

    [Parameter]
    public TransactionGroup TransactionGroup { get; set; } = new();

    private IEnumerable<Models.Transaction.ITransaction?> tableGroupedTransactions { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        tableGroupedTransactions = FilePackage?.ConvertIntoIEnumerableOfGroupRepresentantsAndOtherTransactions().OrderByDescending(t => t?.OperationDate).ToArray() ?? [];
    }


    private async Task ShowTransactionDialogAsync(Models.Transaction.ITransaction? transaction)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium };

        Type type = transaction is Models.Transaction.Transaction ? typeof(ExpensesManagementApp.Client.Components.Dialogs.TransactionDialog) : typeof(ExpensesManagementApp.Client.Components.Dialogs.TransactionGroupDialog);

        bool istransaction = transaction is Models.Transaction.Transaction;

        string ITransactionParamName = istransaction ? "Transaction" : "TransactionGroup";

        var parameters = new DialogParameters
        {
            ["Edition"] = Edition,
            ["FileId"] = FilePackage?.File?.FileId,
            [ITransactionParamName] = istransaction ? transaction : FilePackage?.TransactionGroups?.Where(tg => transaction?.TransactionGroupId == tg?.TransactionGroupId).FirstOrDefault()
        };

        var result = await dialogService.ShowAsync(type, "Transaction", parameters, options);
    }

    private void HandleTransactionGroupCheckboxValueChanged(Models.Transaction.Transaction transaction, bool isCheckboxMarked)
    {
        if (isCheckboxMarked)
        {
            TransactionGroup.Transactions.Add(transaction);
        }
        else
        {
            TransactionGroup.Transactions.Remove(transaction);
        }
    }

    private async Task AddTransactionGroupAsync()
    {
        var _httpResult = await transactionService.AssignTransactionsToGroup(TransactionGroup);
        navigationManager.NavigateTo($"/file/{FilePackage?.File?.FileId}", true);
    }
}
